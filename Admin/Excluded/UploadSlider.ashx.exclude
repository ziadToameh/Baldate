<%@ WebHandler Language="C#" Class="UploadSlider" %>

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Web;
using System.IO;

public class UploadSlider : IHttpHandler
{

    public void ProcessRequest(HttpContext context)
    {

        context.Response.ContentType = "text/plain";
        context.Response.Expires = -1;
        try
        {
            HttpPostedFile postedFile = context.Request.Files["Filedata"];

            string savepath = "";
            string tempPath = "";
            tempPath = System.Configuration.ConfigurationManager.AppSettings["FolderPathSlider"];
            savepath = context.Server.MapPath(tempPath);
            string filename = postedFile.FileName;
            if (!Directory.Exists(savepath))
                Directory.CreateDirectory(savepath);

            ResizeFromStream(savepath + @"\" + filename, 448, postedFile.InputStream);
            
            //postedFile.SaveAs(savepath + @"\" + filename);
            context.Response.Write(tempPath + "/" + filename);
            context.Response.StatusCode = 200;

        }
        catch (Exception ex)
        {
            context.Response.Write("Error: " + ex.Message);
        }
    }
    
    public void ResizeFromStream(string ImageSavePath, int MaxSideSize, Stream Buffer)
    {
        int intNewWidth;
        int intNewHeight;
        Image imgInput = Image.FromStream(Buffer);
        //Determine image format 
        ImageFormat fmtImageFormat = imgInput.RawFormat;
        //get image original width and height 
        int intOldWidth = imgInput.Width; int intOldHeight = imgInput.Height;
        //determine if landscape or portrait 
        int intMaxSide;
        if (intOldWidth >= intOldHeight) { intMaxSide = intOldWidth; }
        else { intMaxSide = intOldHeight; }
        if (intMaxSide > MaxSideSize)
        {
            //set new width and height 
            double dblCoef = MaxSideSize / (double)intMaxSide;
            intNewWidth = 448; // Convert.ToInt32(dblCoef * intOldWidth);
            intNewHeight = 278; // Convert.ToInt32(dblCoef * intOldHeight);
        }
        else { intNewWidth = intOldWidth; intNewHeight = intOldHeight; }
        //create new bitmap 
        Bitmap bmpResized = new Bitmap(imgInput, intNewWidth, intNewHeight);
        //save bitmap to disk 
        bmpResized.Save(ImageSavePath, fmtImageFormat);
        //release used resources 
        imgInput.Dispose();
        bmpResized.Dispose();
        Buffer.Close();
    }



    public bool IsReusable
    {
        get
        {
            return false;
        }
    }

}